class Solution {
    public int minFallingPathSum(int[][] grid) {
        int n = grid.length;
        int ans = Integer.MAX_VALUE;
        int[][] dp = new int[n][n];
        for (int[] row : dp) {
            Arrays.fill(row, Integer.MIN_VALUE);
        }
        for (int col = 0; col < n; col++) {
            ans = Math.min(ans, minimum_falling_path(grid, 0, col, dp));
        }
        return ans;
    }

    public static int minimum_falling_path(int[][] matrix, int cr, int cc, int[][] dp) {
        int n = matrix.length;
        if (cc < 0 || cc >= n) return Integer.MAX_VALUE;
        if (cr == n - 1) return matrix[cr][cc];
        if (dp[cr][cc] != Integer.MIN_VALUE) return dp[cr][cc];

        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < n; i++) {
            if (i == cc) continue; 
            ans = Math.min(ans, minimum_falling_path(matrix, cr + 1, i, dp));
        }
        return dp[cr][cc] = matrix[cr][cc] + ans;
    }
}
