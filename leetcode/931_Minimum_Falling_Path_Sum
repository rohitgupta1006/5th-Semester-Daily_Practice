class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int ans=Integer.MAX_VALUE;
        int[][] dp=new int[matrix.length][matrix[0].length];
        for(int[] arr:dp)
        {
            Arrays.fill(arr,-66666);
        }
        for(int col=0;col<matrix[0].length;col++)
        {
            ans=Math.min(ans,minimum_falling_path(matrix,0,col,dp));
        }
        return ans;
        
    }
    public static int minimum_falling_path(int[][] matrix,int cr,int cc,int[][]dp)
    {
        if(cc<0 || cc>= matrix[0].length)
        {
            return Integer.MAX_VALUE;
        }
        if(cr == matrix.length-1)
        {
            return matrix[cr][cc];
        }
        if(dp[cr][cc] != -66666)
        {
            return dp[cr][cc];
        }
        int ld=minimum_falling_path(matrix,cr+1,cc-1,dp);
        int rd=minimum_falling_path(matrix,cr+1,cc+1,dp);
        int d=minimum_falling_path(matrix,cr+1,cc,dp);
        return dp[cr][cc]=Math.min(ld,Math.min(d,rd))+matrix[cr][cc];
    }
}
